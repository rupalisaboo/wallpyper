#!/usr/bin/env python3

import configparser
import os
import time
from gi.repository import Gio, GLib

Config = configparser.ConfigParser()
homeDir = os.environ.get('HOME')
confName = homeDir + '/.wallpyper.conf'

# Checks if conf file exists.
if !os.path.isfile(confName):
    conf = open(confName, 'w+')
    conf.write('[Configuration]\n\n' +
               '# Directory of the pictures. Defaults to ~/Pictures\n' +
               'Directory: ' + homeDir + 'Pictures\n\n' +
               '# Comment separated list of file names (not paths), or \'*\' for all\n' +
               'Pictures: *\n\n' +
               '# Time each wallpaper is shown in seconds. Defaults to 5 minutes\n' +
               'Time: 300\n\n' +
               '# Controle whether or not script loops. Default is True\n' +
               'Loop: True\n\n' +
               '# Controls if wallpapers are shuffled or played in order. Default is False\n' +
               'Shuffle: False')
    conf.close()

conf = open(confName, 'r')
Config.read(confName)


def ConfigSectionMap(section):
    dict1 = {}
    options = Config.options(section)
    for option in options:
        try:
            dict1[option] = Config.get(section, option)
            if dict1[option] == -1:
                DebugPrint("skip: %s" % option)
        except:
            print("exception on %s!" % option)
            dict1[option] = None
    return dict1

root = ConfigSectionMap('Configuration')['directory']
path = os.path.join(root, 'targetdirectory')
fileList = []
tempList = []

if ConfigSectionMap('Configuration')['pictures'] == '*':
    for path, subdirs, files in os.walk(root):
        for name in files:
            fileList.append(os.path.join(path, name))
else:
    for f in ConfigSectionMap('Configuration')['pictures'].split(','):
        fileList.append(os.path.join(root, f))
    print(fileList)

setting=Gio.Settings.new('org.gnome.desktop.background')

formats = ['.jpeg', '.jpg', '.bmp', '.gif', '.png']

if ConfigSectionMap('Configuration')['loop'] == 'True':
    while True:
        for f in fileList:
            if os.path.splitext(f)[1] in formats:
                fileString = 'file://' + f
                setting.set_string('picture-uri', fileString)
                time.sleep(int(ConfigSectionMap('Configuration')['time']))
            else:
                print('Error: ' + f + 'is not a valid image.')
else:
    for f in fileList:
        if os.path.splitext(f)[1] in formats:
            fileString = 'file://' + f
            setting.set_string('picture-uri', fileString)
            time.sleep(int(ConfigSectionMap('Configuration')['time']))
        else:
            print('Error: ' + f + 'is not a valid image.')

conf.close()
